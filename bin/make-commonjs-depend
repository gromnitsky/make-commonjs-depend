#!/usr/bin/env coffee
# -*-coffee-*-

fs = require 'fs'
Stream = require 'stream'
optparse = require 'optparse'

class Meta
  @_Pkg: null

  @JSON: ->
    if @_Pkg?
      @_Pkg
    else
      @_Pkg = JSON.parse (fs.readFileSync "#{__dirname}/../package.json")

tree = require '../lib/tree'
fub = require '../lib/funcbag'
printer = require '../lib/printer'

conf = {
  streams: false
  startDir: process.cwd()
  rm_output_onerror: true

  output: process.stdout
  mode: 'makefile'
  prefix: ''
}

rm_output_onerror = ->
  return unless conf.rm_output_onerror && conf.output.path
  fs.unlinkSync "#{conf.startDir}/#{conf.output.path}"

parse_opts = (src) ->
  opt = [
    ['-h', '--help', 'output usage information & exit']
    ['-V', '--version', 'output the version number & exit']
    ['-v', '--verbose', 'increase a verbosity level (useful only for debug)']
    ['-o', '--output [FILE]', 'write result to a FILE instead of stdout']
    ['-p', '--prefix [STRING]', 'the prefix is prepended to the name of the target ']
    ['-m', '--mode [STRING]', 'makefile, tree-dumb']
  ]
  p = new optparse.OptionParser opt
  p.banner = "Usage: #{fub.pnGet()} [options] file.js ..."

  p.on 'verbose', -> fub.VERBOSE++

  p.on 'help', ->
    console.log p.toString()
    process.exit 0

  p.on 'version', ->
    console.log Meta.JSON().version
    process.exit 0

  p.on 'output', (unused, val) -> conf.output = val

  p.on 'prefix', (unused, val) -> conf.prefix = val

  p.on 'mode', (unused, val) -> conf.mode = val

  p.on (o) -> fub.errx 1, "unknown option #{o}"

  [(p.parse src), p]

fnodes_each = (args, beforeCallback, afterCallback) ->
  resolvedNodes = {}
  for file,index in args
    beforeCallback index

    ft = new tree.FTree resolvedNodes
    try
      ft.breed file
    catch e
      rm_output_onerror()
      fub.errx 1, e.message if e instanceof tree.FNodeDepError
      throw e

    # create output stream
    unless conf.output instanceof Stream
      conf.output = fs.createWriteStream conf.output
      conf.output.on 'close', ->
        fub.puts 1, 'output', 'close'

    # configure stream
    unless conf.streams
      conf.output.on 'error', (err) ->
        fub.errx 1, "output: #{err}"

      conf.streams = true

    afterCallback ft

draw_tree = (args) ->
  fnodes_each args
  , (index) ->
    conf.output?.write "\n" if index
  , (ftree) ->
    new printer.DumbTreePrinter(ftree, conf.output).print()

draw_makefile = (args) ->
  completedJobs = {}

  fnodes_each args
  , (index) ->
    ;
  , (ftree) ->
    new printer.MakefilePrinter(ftree, conf.output, {
      prefix: conf.prefix
      completedJobs: completedJobs
    }).print()


# main

[args, p] = parse_opts process.argv
args = args[2..-1]
if args.length < 1
  console.log p.toString()
  process.exit 1

switch conf.mode
  when 'tree-dumb'
    draw_tree args
  when 'makefile'
    draw_makefile args
  else
    fub.errx 1, "mode #{conf.mode} isn't implemented"

conf.output.end() if conf.output.path
