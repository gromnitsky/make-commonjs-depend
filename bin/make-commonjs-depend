#!/usr/bin/env coffee
# -*-coffee-*-

fs = require 'fs'
path = require 'path'
Stream = require 'stream'
optparse = require 'optparse'
graphviz = require 'graphviz'

tree = require '../lib/tree'
fub = require '../lib/funcbag'
printer = require '../lib/printer'

conf = {
  progver: JSON.parse(fs.readFileSync("#{__dirname}/../package.json")).version
  streams: false
  startDir: process.cwd()
  rm_output_onerror: true

  output: process.stdout
  mode: 'makefile'
  prefix: ''
  dupsCheck: false
  circularLinksCheck: true
}

rm_output_onerror = ->
  return unless conf.rm_output_onerror && conf.output.path
  fs.unlinkSync "#{conf.startDir}/#{conf.output.path}"

parse_opts = (src) ->
  opt = [
    ["-h", "--help", "output usage information & exit"]
    ["-V", "--version", "output the version number & exit"]
    ["-v", "--verbose", "increase a verbosity level (debug only)"]
    ["-o", "--output [FILE]", "write result to a FILE instead of stdout"]
    ["-p", "--prefix [STRING]", "the prefix is prepended to the name of the target"]
    ["-m", "--mode [STRING]", "makefile, tree-dumb, dot"]
    ["--dups-check", "analyze any file exactly once"]
    ["--no-circular-error", "skip circular nodes (not recommended)"]
  ]
  p = new optparse.OptionParser opt
  p.banner = "Usage: #{fub.pnGet()} [options] file.js ..."

  p.on 'verbose', -> fub.VERBOSE++

  p.on 'dups-check', -> conf.dupsCheck = true

  p.on 'no-circular-error', -> conf.circularLinksCheck = false

  p.on 'help', ->
    console.log p.toString()
    process.exit 0

  p.on 'version', ->
    console.log conf.progver
    process.exit 0

  p.on 'output', (unused, val) -> conf.output = val

  p.on 'prefix', (unused, val) -> conf.prefix = val

  p.on 'mode', (unused, val) -> conf.mode = val

  p.on (o) -> fub.errx 1, "unknown option #{o}"

  [(p.parse src), p]

dupsCheck = (file, resolvedNodes) ->
  return false unless conf.dupsCheck

  r = false
  try
    absolute = tree.FNode.ResolveName2 null, file
    if resolvedNodes[absolute]
      fub.puts 1, 'fnodes_each', "%s: already processed", absolute
      r = true
  catch e
    fub.warnx "fnodes_each: #{e}" if fub.VERBOSE >= 2

  r

fnodes_each = (args, beforeCallback, afterCallback) ->
  resolvedNodes = {}
  for file,index in args
    continue if dupsCheck file, resolvedNodes

    beforeCallback index

    ft = new tree.FTree {
      mustBeReal: true
      circularLinksCheck: conf.circularLinksCheck
    }, resolvedNodes
    try
      ft.breed null, file
    catch e
      rm_output_onerror()
      fub.errx 1, e.message if e instanceof tree.FNodeDepError
      throw e

    # create output stream
    unless conf.output instanceof Stream
      conf.output = fs.createWriteStream conf.output
      conf.output.on 'close', ->
        fub.puts 1, 'output', 'close'

    # configure stream
    unless conf.streams
      conf.output.on 'error', (err) ->
        fub.errx 1, "output: #{err}"

      conf.streams = true

    ft.index = index
    afterCallback ft

draw_tree = (args) ->
  fnodes_each args
  , (index) ->
    conf.output?.write "\n" if index
  , (ftree) ->
    new printer.DumbTreePrinter(ftree, conf.output).print()

draw_makefile = (args) ->
  completedJobs = {}

  fnodes_each args
  , (index) ->
    ;
  , (ftree) ->
    new printer.MakefilePrinter(ftree, conf.output, {
      prefix: conf.prefix
      completedJobs: completedJobs
    }).print()

draw_dot = (args) ->
  completedJobs = {}
  g = graphviz.digraph 'G'
  g.set 'rankdir', 'LR'
#  g.setNodeAttribut 'fontname', 'Trebuchet MS'

  fnodes_each args
  , (index) ->
    ;
  , (ftree) ->
    new printer.DotPrinter(ftree, conf.output, {
      completedJobs: completedJobs
      g: g
    }).generate()

  conf.output.write g.to_dot()


# main

[args, p] = parse_opts process.argv
args = args[2..-1]
if args.length < 1
  console.log p.toString()
  process.exit 1

switch conf.mode
  when 'tree-dumb'
    draw_tree args
  when 'makefile'
    draw_makefile args
  when 'dot'
    draw_dot args
  else
    fub.errx 1, "mode #{conf.mode} isn't implemented"

conf.output.end() if conf.output.path
